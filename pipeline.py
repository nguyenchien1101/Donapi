import os
import subprocess
from modules.shell_detector import detect_shell_commands_and_urls as detect_shell_commands
from modules.obfuscation_detector import detect_obfuscation
from modules.static_classifier import classify_static
from modules.dynamic_behavior_extractor import run_dynamic_with_hook
from modules.hierarchical_classifier import classify_behavior_from_jsonl

def run_pipeline(package_path):
    print(f"\nüì¶ [Pipeline] Ph√¢n t√≠ch g√≥i: {package_path}")
    package_path = os.path.abspath(package_path)
    merged_js = os.path.join(package_path, 'merged.js')

    # Step 1: Reconstruct
    print("\nüõ†Ô∏è [1] Reconstructing...")
    subprocess.run(['python3', 'modules/reconstruct_module.py', package_path])
    if not os.path.exists(merged_js):
        print("‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c merged.js. D·ª´ng pipeline.")
        return

    # Step 2: Shell Detector
    print("\nüß® [2] Shell Detector...")
    shell_results = detect_shell_commands(package_path)
    shell_behaviors = []
    for r in shell_results:
        shell_behaviors.extend(r.get('behaviors', []))
    print(f"‚úÖ Shell Behaviors: {shell_behaviors}")

    # Step 3: Obfuscation Detector
    print("\nüåÄ [3] Obfuscation Detector...")
    try:
        is_obfuscated = detect_obfuscation(merged_js)
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra m√£ r·ªëi: {e}")
        is_obfuscated = False
    print(f"Obfuscated: {is_obfuscated}")

    static_result = "unknown"
    run_dynamic = False

    if is_obfuscated:
        print("‚û°Ô∏è M√£ r·ªëi: Chuy·ªÉn th·∫≥ng sang ph√¢n t√≠ch ƒë·ªông.")
        run_dynamic = True
    else:
        # Step 4: Static Classifier
        print("\nüî¨ [4] Static Classification...")
        try:
            static_result = classify_static(merged_js)
            print(f"Static Classification: {static_result}")
            if static_result.lower() == 'malware':
                print("‚ö†Ô∏è Static x√°c ƒë·ªãnh l√† Malware ‚Üí ti·∫øp t·ª•c ph√¢n t√≠ch ƒë·ªông.")
                run_dynamic = True
            elif static_result.lower() == 'benign':
                if any(l.startswith('M') for l in shell_behaviors):
                    print("‚ùó Static benign nh∆∞ng Shell c√≥ h√†nh vi nguy hi·ªÉm ‚Üí K·∫æT LU·∫¨N: MALWARE.")
                    final_labels = set(shell_behaviors)
                    print(f"\nüß† T·ªïng h·ª£p nh√£n h√†nh vi: {list(final_labels)}")
                    print(f"\n‚úÖ [K·∫æT LU·∫¨N CU·ªêI C√ôNG] ‚û§ G√≥i n√†y l√†: MALWARE")
                    return
                else:
                    print("‚úÖ Static benign v√† Shell benign ‚Üí K·∫æT LU·∫¨N: BENIGN.")
                    final_labels = set()
                    print(f"\nüß† T·ªïng h·ª£p nh√£n h√†nh vi: []")
                    print(f"\n‚úÖ [K·∫æT LU·∫¨N CU·ªêI C√ôNG] ‚û§ G√≥i n√†y l√†: BENIGN")
                    return
        except Exception as e:
            print(f"‚ùå L·ªói static classifier: {e}")

    # Step 5: Dynamic Execution n·∫øu c·∫ßn
    if run_dynamic:
        print("\n‚öôÔ∏è [5] Dynamic Execution...")
        run_dynamic_with_hook(merged_js)
    else:
        print("‚è© B·ªè qua dynamic execution.")

    # Step 6: Hierarchical Classification
    print("\nüèÅ [6] Hierarchical Classification...")
    hierarchical_labels = classify_behavior_from_jsonl()
    print(f"üß† Hierarchical Behaviors: {hierarchical_labels}")

    # Final Decision
    final_labels = set(shell_behaviors + hierarchical_labels)
    print(f"\nüß† T·ªïng h·ª£p nh√£n h√†nh vi: {list(final_labels)}")
    is_malware = any(l.startswith('M') for l in final_labels)
    verdict = "Malware" if is_malware else "Benign"
    print(f"\n‚úÖ [K·∫æT LU·∫¨N CU·ªêI C√ôNG] ‚û§ G√≥i n√†y l√†: {verdict.upper()}")

if __name__ == '__main__':
    import sys
    if len(sys.argv) != 2:
        print("‚ùå D√πng: python3 pipeline.py <ƒë∆∞·ªùng_d·∫´n_g√≥i>")
        exit(1)
    run_pipeline(sys.argv[1])
