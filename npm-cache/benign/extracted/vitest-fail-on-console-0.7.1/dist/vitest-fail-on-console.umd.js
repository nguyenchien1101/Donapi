(function(s,c){typeof exports=="object"&&typeof module<"u"?c(exports,require("vitest"),require("util"),require("chalk")):typeof define=="function"&&define.amd?define(["exports","vitest","util","chalk"],c):(s=typeof globalThis<"u"?globalThis:s||self,c(s["Vitest-fail-on-console"]={},s.vitest,s.util,s.chalk))})(this,function(s,c,x,f){"use strict";function m(e){const d=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(const l in e)if(l!=="default"){const g=Object.getOwnPropertyDescriptor(e,l);Object.defineProperty(d,l,g.get?g:{enumerable:!0,get:()=>e[l]})}}return d.default=e,Object.freeze(d)}const S=m(x);var r=(e=>(e.Assert="assert",e.Debug="debug",e.Error="error",e.Info="info",e.Log="log",e.Warn="warn",e))(r||{});const a=`
`,w=e=>`vitest-fail-on-console > Expected test not to call ${f.bold(`console.${e}()`)}.
    If the ${e} is expected, test for it explicitly by mocking it out using: 
    ${f.bold(`vi.spyOn(console, '${e}').mockImplementation(() => {}) `)}
    and test that the warning occurs.`,F=({errorMessage:e=w,shouldFailOnAssert:d=!1,shouldFailOnDebug:l=!1,shouldFailOnError:g=!0,shouldFailOnInfo:I=!1,shouldFailOnLog:L=!1,shouldFailOnWarn:P=!0,skipTest:O=void 0,silenceMessage:y=void 0,afterEachDelay:j=void 0}={errorMessage:w,shouldFailOnAssert:!1,shouldFailOnDebug:!1,shouldFailOnError:!0,shouldFailOnInfo:!1,shouldFailOnLog:!1,shouldFailOnWarn:!0,silenceMessage:void 0,skipTest:void 0,afterEachDelay:void 0})=>{const T=(n,o)=>{if(o.length){const p=o.map(([$,b])=>{const t=$.split(a);return`${f.red(b)}${a}${t.map((i,u)=>u===t.length-1?f.white(i):f.gray(i)).join(a)}`}),v=e(n),h=`${a}${a}`;throw new Error(`${v}${h}${p.join(h)}`)}},_=n=>{const o=[],p=(t,...i)=>{const u=S.format(t,...i);if(y&&y(u,n))return;const{stack:E}=new Error;E&&o.push([E.slice(E.indexOf(a)+1),u])},v=(t,i,...u)=>{t||p(i,...u)},h=n===r.Assert?v:p,$=console[n],b=()=>{const t=c.expect.getState(),i=t.currentTestName,u=t.testPath;return!!(O!=null&&O({testName:i,testPath:u}))};c.beforeEach(()=>{b()||(console[n]=h,o.length=0)}),c.afterEach(async()=>{b()||(j&&await new Promise(t=>setTimeout(t,j)),T(n,o),console[n]=$)})};[[d,r.Assert],[l,r.Debug],[g,r.Error],[I,r.Info],[L,r.Log],[P,r.Warn]].forEach(([n,o])=>{n&&_(o)})};s.default=F,Object.defineProperties(s,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=vitest-fail-on-console.umd.js.map
