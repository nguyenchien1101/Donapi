<?jhs 
const {readFileSync} = require('fs');
const highlight_style = 
	[
		'default','base16/solarized-dark','base16/solarized-light','base16/github','base16/railscasts',
		'monokai-sublime','mono-blue','base16/tomorrow','color-brewer','base16/zenburn','agate','androidstudio','base16/dracula','rainbow','vs','atom-one-dark','atom-one-light'
	];

function loadTemplate(template){return readFileSync(flags.root +'/templates/'+template).toString();}
function setHeader(title){return loadTemplate('header').replace(/__TITLE__/, title);}

var code = [
	{
		file:'hello-world.jhs',
		description:'A simple hello world page which also echoes today date.'
	},
	{
		file:'index.jhs',
		description:'This very same index.jhs page. It exploits a third-party code highlighter and ajax libs.'
	}
];



function setHighlight(sty){
	if(typeof sty !='number' && typeof sty !='string') return typeof sty;
	if(typeof sty == 'number')
	sty = highlight_style[sty];
	if(highlight_style.indexOf(sty) == -1) return 'void 2';
	return `
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/${sty}.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
<script>hljs.highlightAll();</script>
		`;
}

function setCode(cod){
	if(typeof cod !='number' && typeof cod !='string') return '';
	if(typeof cod == 'number')
	cod = code[cod].file;
	cod = readFileSync(flags.root+'\\'+cod).toString();
	cod = cod.replace(/</g,'&lt;').replace(/>/g,'&gt;').trim();
	return cod
}
?>
<!DOCTYPE html> 
<html lang="en-US"><head><meta charset="utf-8"> 
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"> 
<base href="<?jhs echo(flags.home) ?>"> 
<?jhs echo(loadTemplate('ajaxlibs')) ?>
<link rel="stylesheet" href="./css/style-0.css"></link>
<link rel="stylesheet" href="./css/style-1.css"></link>
<?jhs echo(setHighlight('base16/dracula')) ?> 
<title>JHS Module</title>
<link rel="icon" type="image/x-icon" href="/images/favicon.ico">
<meta name="description" content="JHS is a Node.js module for building dynamic web pages using pure javascript language" />
<meta name="robots" content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1" />
<link rel="canonical" href="" />
</head> 
<body class=""> 
	<?jhs echo(setHeader('Examples of Usage of the JHS Module:')) ?>
	<div id="body"><br>
		<h2>Hi webmaster, your JHS webpages must look like these ones</h2>
		<ul  id="examples">
			<?jhs for(var i=0;i<code.length;i++){?>
			<li><div class="example">
					Example <?jhs echo(i+1)?>: 
					<?jhs  if(code[i].file!='index.jhs'){?>
					<a target="_blank" title="open '<?jhs echo(code[i].file)?>' page in new tab" href="./<?jhs echo(code[i].file)?>"><?jhs echo(code[i].file)?></a>
					<?jhs } else {echo(code[i].file)}?>
					<div class="description"><?jhs echo(code[i].description)?></div>
					Source code:
					<pre class="pre-code">
						<code class="language-javascript"><?jhs echo(setCode(i)) ?></code>
					</pre>
				</div>
				<br>
			</li>
			<?jhs } ?>
		</ul>
		<h2>The basic configuration of a NODEjs server that uses a JHS module is as follows:</h2>
		<ol class="configurations">
        <li><div> Require the JHS Module, along with the other modules
		<pre><code class="language-javascript">
		const JHS  = require('jhs').instance;
		const path = require('path');
		</code>
		</pre>
        </div>
		</li>
		<li><div> Create an 'options' object and an instance of the JHS Module:
		<pre><code class="language-javascript">
		const 	options = {root:"./wwwroot"},
		execJHS = new JHS();
		</code>
		</pre>									
        </div>
		 </li>
		 <li><div > Call the async function execJHS.parseFile() in the server requests listener
		<pre><code class="language-javascript">
		server.on('request', function(request, response) {
		...	   
		execJHS.parseFile(options.root+"/myfile.jhs",false, options, function(jhsResult, err){
			response.end(jhsResult);
		});     
		
		...
		}); 
		</code>
		</pre>
        </div>
		 </li>
		</ol>
		<h2>If you want a hierarchical level configuration, you can use the instantiator </h2>
		<ol class="configurations">
        <li><div> This will create a 2-level config
		<pre><code class="language-javascript">
		const JHS  = require('jhs').instantiator;
		//You must specify how many levels you want
		const execJHS = new JHS({levels:2}); 
		</code>
		</pre>
        </div>
		</li>
		<li><div> Call the async function execJHS.parse() in the server requests listener
		<pre><code class="language-javascript">
		server.on('request', function(request, response) {
		...
		
		execJHS.parse(options.root+"/myfile.jhs",false, options, function(jhsResult, err){
			response.end(jhsResult);
		});  

		/&#42;note that the function here is called just 'parse'  not 'parseFile', 
		but its arguments can be the same&#42;/
		...
		}); 
		</code>
		</pre>
        </div>
		 </li>
		</ol>
	</div>
	<?jhs echo(loadTemplate('footer')) ?>
</body>
</html>