import subprocess
import sys
import os
import time

def run_dynamic_with_hook(merged_path):
    if not os.path.exists(merged_path):
        print(f"[ERROR] Kh√¥ng t√¨m th·∫•y file: {merged_path}")
        return

    instrument_path = os.path.join(os.path.dirname(__file__), 'instrument.js')
    if not os.path.exists(instrument_path):
        print(f"[ERROR] Kh√¥ng t√¨m th·∫•y instrument.js t·∫°i {instrument_path}")
        return

    print(f"[INFO] ‚ñ∂Ô∏è ƒêang ch·∫°y merged.js v·ªõi instrument hook...")
    try:
        start = time.time()
        result = subprocess.run(
            ['node', '-r', instrument_path, merged_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            timeout=30
        )
        duration = time.time() - start
    except subprocess.TimeoutExpired:
        print("[ERROR] ‚ùå Qu√° th·ªùi gian ch·∫°y node script.")
        return

    print(f"[INFO] ‚è±Ô∏è Th·ªùi gian ch·∫°y: {duration:.2f}s")
    print(f"[INFO] üì§ D√≤ng stdout t·ª´ merged.js:")
    print("=" * 50)
    for line in result.stdout.strip().split('\n'):
        print(line)
    print("=" * 50)

    log_file = os.path.join(os.getcwd(), 'dynamic_log.jsonl')
    if os.path.exists(log_file):
        print(f"[‚úÖ] ƒê√£ ghi log h√†nh vi t·∫°i: {log_file}")
    else:
        print("[‚ö†Ô∏è] Kh√¥ng t√¨m th·∫•y dynamic_log.jsonl n√†o ƒë∆∞·ª£c ghi.")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("C√°ch d√πng: python3 dynamic_behavior_extractor.py <ƒë∆∞·ªùng_d·∫´n_t·ªõi_merged.js>")
        sys.exit(1)

    merged_js = os.path.abspath(sys.argv[1])
    run_dynamic_with_hook(merged_js)
